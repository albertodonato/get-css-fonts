#!/usr/bin/env python3

"""Create a fonts CSS file with local resources from a Google fonts URL."""

import os
import re
import sys
import logging
from collections import namedtuple
from argparse import ArgumentParser

import requests


CSS_RE = re.compile(
    r"^(?P<begin>\s+src:.*)local\('(?P<name>.*?)'\),\s+"
    r"url\((?P<url>.*?)\)(?P<end>.*)")

Font = namedtuple('Font', ['filename', 'url'])

# setup logging
logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger()


def parse_args():
    """Parse command line."""
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('url', help='a URL for fonts CSS')
    parser.add_argument(
        '--cssfile', default='fonts.css', help='target filename for fonts CSS')
    parser.add_argument(
        '--fontdir', default='fonts', help='target directory for fonts')
    return parser.parse_args()


def fetch_file(url, filename=None):
    """Fetch a file from a URL.

    If filename is provided, content is saved to file, otherwise is returned.

    """
    response = requests.get(url)
    logger.info('fetching {url}'.format(url=url))
    if response.status_code != 200:
        raise Exception(
            'Failed fetcing "{url}: {r.status_code} {r.reason}'.format(
                url=url, r=response))

    if not filename:
        return response.text

    with open(filename, 'w') as fd:
        logger.info('saving content to {filename}'.format(filename=filename))
        fd.write(response.text)


def make_css_urls_local(content, fontdir):
    """Process CSS content and converts urls to local files.

    Return the converted CSS text and a list of Fonts.

    """
    fonts = []
    converted = []
    for line in content.splitlines():
        line, font = _process_line(line, fontdir)
        if font:
            fonts.append(font)
        converted.append(line)
    return '\n'.join(converted), fonts


def _process_line(line, fontdir):
    match = CSS_RE.match(line)
    if not match:
        return line, None

    data = match.groupdict()
    filename = os.path.join(fontdir, data['name'] + '.ttf')
    line = "{begin}local('{name}'), url('{filename}'){end}".format(
        filename=filename, **data)
    return line, Font(filename, data['url'])


def main():
    args = parse_args()

    # fetch the fonts CSS
    css = fetch_file(args.url)
    relative_fontdir = os.path.relpath(
        args.fontdir, os.path.dirname(args.cssfile))
    css, fonts = make_css_urls_local(css, relative_fontdir)

    # write updated CSS
    with open(args.cssfile, 'w') as fd:
        logger.info(
            'saving updated CSS to {filename}'.format(filename=args.cssfile))
        fd.write(css)

    # fetch font files
    os.makedirs(args.fontdir, exist_ok=True)
    for font in fonts:
        fetch_file(font.url, filename=font.filename)


if __name__ == '__main__':
    main()
